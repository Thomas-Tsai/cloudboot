#!/bin/bash



# Load Tux2live setting and functions
cloudboot_root_path=$(cd $(dirname .) ;pwd)

# Load global configuration
[ -f "$cloudboot_root_path/conf/cloudboot.conf" ] &&  . $cloudboot_root_path/conf/cloudboot.conf

# Load sub function for global usage
[ -f "$cloudboot_root_path/functions.lib" ] &&  . $cloudboot_root_path/functions.lib

#######
# Main
#######

keep_ipxe_make_dir="yes"
rom_script="$cloudboot_root_path/rom-image.ipxe"
ipxe_image_path="$cloudboot_root_path/ipxe_image"
ipxe_path="ipxe"
ipxe_src="$cloudboot_root_path/$ipxe_path/src/"
ipxe_bin="$cloudboot_root_path/$ipxe_path/src/bin"
ver=`cat VERSION`

build_rom_script(){

    ip=`cat config.php |grep site | grep -v url|awk {'print $3'} | sed  s/\"//g | sed s/=//g | sed s/\;//`
    local_path=`cat config.php | grep local_path | grep -v http | awk {'print $3'} | sed  s/\"//g | sed s/=//g | sed s/\;//`
    cat <<-IPXE > $rom_script
#!gpxe
set filename http://$ip/$local_path/boot.gpxe
:ask_network
echo Welcome to CLOUDBOOT
echo Current Network status:
ifstat
route
echo
prompt --timeout 10000 Press anykey for cloudboot iPXE menu or autoboot after 10 secs && || autoboot
echo a) AUTO config network (Default)
echo b) Getting IP address from DHCP Server
echo c) Manual config network
echo d) Entering iPXE Shell
echo e) Config iPXE all options
read answer
iseq \${answer} a && autoboot ||
iseq \${answer} b && goto setup_dhcp ||
iseq \${answer} c && goto setup_ipconfig ||
iseq \${answer} d && shell ||
iseq \${answer} e && config ||
goto ask_network

:setup_dhcp
dhcp && chain \${filename} || goto ask_network

:ask_next
echo a) reset ip address
echo b) back to top menu
read next
iseq \${next} a && goto setup_ipconfig ||
iseq \${next} b && goto ask_network ||

:setup_ipconfig
echo -n which network card you want to config (net0, net1 or netxxx) \${} && read netcard
isset \${netcard} && echo config \${netcard} || goto setup_ipconfig
:set_ip
echo -n \${netcard} ip address: \${} && read address
set \${netcard}/ip \${address} || goto set_ip
:set_nm
echo -n \${netcard} netmask: \${} && read netmask
set \${netcard}/netmask \${netmask} || goto set_nm
:set_gw
echo -n \${netcard} gateway: \${} && read gateway
set \${netcard}/gateway \${gateway} || goto set_gw
:set_dns
echo -n DNS Server: \${} && read dns
set \${dns} || goto set_dns
echo New network configure:
ifstat
route
echo -n Is it correct? (y/n) \${} && read correct
iseq \${correct} y && chain \${filename} || goto ask_network
iseq \${correct} Y && chain \${filename} || goto ask_network
iseq \${correct} n && goto ask_next ||
iseq \${correct} N && goto ask_next ||

IPXE
}

copy_rom() {
    [ ! -d $ipxe_image_path ] && mkdir $ipxe_image_path
    [ ! -d $cloudboot_root_path/$ipxe_path ] && git clone git://git.ipxe.org/ipxe.git $ipxe_path
    [ -f $rom_script ] && make -C $ipxe_src EMBEDDED_IMAGE=$rom_script
    rm $ipxe_bin/ipxe*.tmp
    rm $ipxe_bin/ipxe*.map
    #ipxe.dsk  ipxe.iso  ipxe.lkrn  ipxe.usb
    #cp $ipxe_bin/ipxe.iso  $ipxe_image_path/cloudboot_$ver.iso
    _patch_iso $ipxe_bin/ipxe.iso  $ipxe_image_path/cloudboot_$ver.patch.iso
    cp $ipxe_bin/ipxe.dsk  $ipxe_image_path/cloudboot_$ver.dsk
    cp $ipxe_bin/ipxe.lkrn $ipxe_image_path/cloudboot_$ver.lkrn
    cp $ipxe_bin/ipxe.usb  $ipxe_image_path/cloudboot_$ver.usb
    [ $keep_ipxe_make_dir == "NO" ] && rm -rf $ipxe_path
}

enable_custom_rom_page(){
    enable_custom_rom=`grep enable_custom_rom config.php  | sed -e 's/$enable_custom_rom//' | sed -e 's/=//g' | sed -e 's/ //g' | sed -e 's/;//'`
    if [ $enable_custom_rom == 'true' -o $enable_custom_rom == 'TRUE' ]; then
        make -C $ipxe_src bin/NIC
    fi
}

build_rom_script
copy_rom
enable_custom_rom_page
